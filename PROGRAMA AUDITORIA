import pandas as pd
import re

def load_data(file_path):
    """Load data from a CSV file."""
    try:
        data = pd.read_csv(file_path)
        print("Data loaded successfully.")
        return data
    except Exception as e:
        print(f"Error loading data: {e}")
        return None

def check_duplicates(data):
    """Check for duplicate rows in the DataFrame."""
    duplicates = data[data.duplicated()]
    if not duplicates.empty:
        print(f"Found {len(duplicates)} duplicate rows.")
        return duplicates
    else:
        print("No duplicate rows found.")
        return None

def validate_format(data, column, pattern):
    """Validate the format of a specified column using a regex pattern."""
    invalid_entries = data[~data[column].astype(str).str.match(pattern)]
    if not invalid_entries.empty:
        print(f"Found {len(invalid_entries)} invalid entries in column '{column}'.")
        return invalid_entries
    else:
        print(f"All entries in column '{column}' are valid.")
        return None

def validate_required_fields(data, required_columns):
    """Check for missing values in required columns."""
    missing_values = data[required_columns].isnull().sum()
    missing_values = missing_values[missing_values > 0]
    if not missing_values.empty:
        print("Missing values found in required fields:")
        print(missing_values)
        return missing_values
    else:
        print("No missing values in required fields.")
        return None

def generate_report(duplicates, invalid_entries, missing_values):
    """Generate a simple report of the findings."""
    with open('audit_report.txt', 'w') as report:
        report.write("Audit Report\n")
        report.write("="*50 + "\n\n")
        
        if duplicates is not None:
            report.write("Duplicate Rows:\n")
            report.write(duplicates.to_string())
            report.write("\n\n")
        
        if invalid_entries is not None:
            report.write("Invalid Entries:\n")
            report.write(invalid_entries.to_string())
            report.write("\n\n")
        
        if missing_values is not None:
            report.write("Missing Values in Required Fields:\n")
            report.write(missing_values.to_string())
            report.write("\n\n")
        
        report.write("Audit completed successfully.\n")
        
    print("Audit report generated: audit_report.txt")

def main():
    file_path = 'data.csv'  # Replace with your file path
    required_columns = ['column1', 'column2']  # Replace with your required columns
    format_validations = {
        'column1': r'^\d{4}-\d{2}-\d{2}$',  # Example: YYYY-MM-DD date format
        'column2': r'^\d+$'  # Example: Only digits
    }
    
    data = load_data(file_path)
    if data is not None:
        duplicates = check_duplicates(data)
        invalid_entries = None
        for column, pattern in format_validations.items():
            invalids = validate_format(data, column, pattern)
            if invalids is not None:
                if invalid_entries is None:
                    invalid_entries = invalids
                else:
                    invalid_entries = pd.concat([invalid_entries, invalids])
        
        missing_values = validate_required_fields(data, required_columns)
        generate_report(duplicates, invalid_entries, missing_values)

if __name__ == '__main__':
    main()
